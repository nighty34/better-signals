local signals = require "nightfury/signals/main"

function data()

return { 
	params = {
		{
			key = "nighty_type_n_speedindicator",
			name = _("nighty_type_n_speedindicator"),
			uiType = "ICON_BUTTON",
			values = {"ui/parameters/nighty/none.tga","ui/parameters/nighty/typ-n_pre_speed_indicator_on.tga"},
			defaultIndex = 0,
			tooltip = _("nighty_type_n_speedindicator_tooltip"),
		},
		{
			key = "nighty_type_n_pre_station",
			name = _("nighty_type_n_pre_station"),
			uiType = "ICON_BUTTON",
			values = {"ui/parameters/nighty/none.tga", "ui/parameters/nighty/typ-n_pre_speed_pre_station_on.tga"},
			defaultIndex = 0,
			tooltip = _("nighty_type_n_pre_station_tooltip"),
		},
	},
	type = "ASSET_DEFAULT",
	--buildMode = "MULTI",
	description = {
		name = _("nighty_type_n_vorsignal_name"),			
		description = _("nighty_type_n_vorsignal_desc"),
	},
	availability = {
		yearFrom = 1950		
	},
	skipOnInit = true,
	categories = { "nighty_typ_n" },
	skipCollision = true,
	autoRemovable = false,
	order = 34340,
	
	updateFn = function(params)
		local result = {}
		result.models = {}


		-- Determine signalComponents
		local isGreen = (params.signal_state and params.signal_state == 1)
		local hasSpeedIndicator = (params.nighty_type_n_speedindicator and params.nighty_type_n_speedindicator == 1)
		local displayWarning = (params.nighty_type_n_shorten_block and params.nighty_type_n_shorten_block == 1)
		local signalType = "normal"
		local maxSpeed = 110
		local indicatedSpeed = maxSpeed + 1
		local canIndicateSpeed = true
		local indicatesNextSpeed = false

		if (params.signal_speed) then
			indicatedSpeed = params.signal_speed
		end

		if params.nighty_type_n_pre_station == 1 then
				signalType = "preStationSignal"
		end

		-- Evaluate future signals
		local nextStopSignalDistance = 10 -- choosen high TODO: (dirty code)
		

		if params.following_signal then
			if params.following_signal.signal_state == 0 then
				nextStopSignalDistance = 1
			elseif params.following_signal.following_signal and (params.following_signal.following_signal.signal_state == 0) then
				nextStopSignalDistance = 2
			end

			if params.previous_speed and params.previous_speed > params.following_signal.signal_speed then
				indicatesNextSpeed = true
				indicatedSpeed = params.following_signal.signal_speed
			end
		else
			indicatesNextSpeed = false
		end
		

		if nextStopSignalDistance == 1 then
			canIndicateSpeed = false
		elseif displayWarning and nextStopSignalDistance == 2 then
			canIndicateSpeed = false
		elseif displayOccupied and nextStopSignalDistance == 1 then
			canIndicateSpeed = false
		end

		
		-- Model definition
		result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_vorsignal.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
		
		if signalType == "preStationSignal" then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n-station_pre.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
		end
		
		-- signal lamps
		if not isGreen or ((nextStopSignalDistance == 1) or (indicatesNextSpeed and (maxSpeed >= indicatedSpeed)) or (displayWarning and (nextStopSignalDistance == 2))) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_yellow.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
		else -- green
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_green.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
		end


		-- Speed indicator
		if hasSpeedIndicator then 
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speedindicator.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
			if isGreen and canIndicateSpeed then
				if indicatedSpeed <= 30 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_30.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
			
				elseif indicatedSpeed <= 40 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_40.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 50 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_50.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 60 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_60.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 70 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_70.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 80 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_80.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 90 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_90.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 100 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_100.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				
				elseif indicatedSpeed <= 110 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_110.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				end
			elseif isGreen then
				if displayWarning and nextStopSignalDistance == 2 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_v.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }}
				end
			end
		end
		
		result.cost = -1
		result.maintenanceCost = result.cost / 6

		result.terrainAlignmentLists = {
			{
				type = "LESS",
				faces = { { { .1, -.1, 0 }, { -.1, -.1, 0 }, { -.1, .1, 0 } , { .1, .1, 0 } } },
				slopeLow = 0,
				slopeHigh = 0,
				optional = true,
			},
		}
		
		
		result.groundFaces = {
			{  
				face = { { -1, -1, 0 }, { 1, -1, 0 }, { 1, 1, 0 } },
				modes = {
					{
						type = "FILL",               
						key = "industry_floor.lua"
					}
				},
				loop = true,
				alignmentOffsetMode = "OBJECT",
				alignmentDirMode = "OBJECT",
				alignmentOffset = { -2.0, -1.0 },

			},
		}
		
		return result
	end
}
end